@model OOP_Seminars.Models.ForestAreaModel

@{
    ViewBag.Title = "Результат";
}

<h2>Результат (Алгоритм: @ViewBag.algorithmSelect Метод: @ViewBag.forestArraySelect)</h2>

<style>
    #map {
        height: 50vh; /* уменьшил высоту карты для места полей ввода */
    }

    .input-container {
        margin-top: 20px;
    }

        .input-container input {
            margin-right: 10px;
        }

    #treesList {
        margin-top: 20px;
    }
</style>

<div id="map"></div>
<div id="coordinates"></div>

<div class="input-container">
    <input type="number" id="treesToRemove" placeholder="Введите количество деревьев для удаления" />
    <button onclick="removeTrees()">Удалить</button>
</div>

<div id="treesList"></div>

@section scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
          integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
          crossorigin="" />
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
            integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
            crossorigin=""></script>

    <script>
        var map;
        var polygon;
        var trees;

        function init() {
            // Вычисляем центр участка
            var vertexCoordinates = @Html.Raw(Json.Encode(Model.VertexCoordinates));
            var center = calculateCenter(vertexCoordinates);

            // Создаем карту и центрируем по центру участка
            map = L.map('map').setView([center.lat, center.lng], 18);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            // Добавляем линию периметра
            polygon = L.polygon(vertexCoordinates.map(function (vertex) {
                return [vertex.Latitude, vertex.Longitude];
            })).addTo(map);

            // Добавляем обработчик события клика для каждой точки на периметре
            polygon.on('click', function (e) {
                alert("Координаты: " + e.latlng.lat + ", " + e.latlng.lng);
            });

            // Добавляем деревья
            trees = @Html.Raw(Json.Encode(Model.Trees));
            trees.forEach(function (tree) {
                var treeMarker = L.circleMarker([tree.Latitude, tree.Longitude]).addTo(map);
                tree.marker = treeMarker; // Сохраняем ссылку на маркер в объекте дерева

                // Добавляем обработчик события клика для каждого дерева
                treeMarker.on('click', function (e) {
                    alert("Координаты дерева: " + e.latlng.lat + ", " + e.latlng.lng);
                });
            });

            // Добавляем обработчик события наведения курсора
            map.on('mousemove', function (e) {
                document.getElementById('coordinates').innerHTML = 'Координаты: ' + e.latlng.lat.toFixed(6) + ', ' + e.latlng.lng.toFixed(6);
            });

            // Добавляем обработчик события правого клика мыши
            map.on('contextmenu', function (e) {
                var coordinatesText = e.latlng.lat.toFixed(6) + ', ' + e.latlng.lng.toFixed(6);
                navigator.clipboard.writeText(coordinatesText);
                alert("Координаты скопированы в буфер обмена: " + coordinatesText);
            });
        }

        // Функция для вычисления центра участка
        function calculateCenter(vertexCoordinates) {
            var totalLat = 0;
            var totalLng = 0;

            for (var i = 0; i < vertexCoordinates.length; i++) {
                totalLat += vertexCoordinates[i].Latitude;
                totalLng += vertexCoordinates[i].Longitude;
            }

            return {
                lat: totalLat / vertexCoordinates.length,
                lng: totalLng / vertexCoordinates.length
            };
        }

        function removeTrees() {
            var treesToRemove = parseInt(document.getElementById('treesToRemove').value);
            var removedTrees = []; // Массив для хранения удаленных деревьев
            if (!isNaN(treesToRemove) && treesToRemove > 0) {
                if (treesToRemove >= trees.length) {
                    // Если запрошенное количество деревьев больше или равно оставшемуся, удаляем все оставшиеся деревья
                    trees.forEach(function (tree) {
                        var treeMarker = tree.marker; // Получаем маркер из объекта дерева
                        map.removeLayer(treeMarker); // Удаляем маркер дерева с карты
                        removedTrees.push(tree); // Добавляем удаленное дерево в массив
                    });
                    trees = []; // Очищаем массив деревьев
                } else {
                    // Иначе удаляем запрошенное количество деревьев
                    for (var i = 0; i < treesToRemove; i++) {
                        var randomIndex = Math.floor(Math.random() * trees.length);
                        var tree = trees.splice(randomIndex, 1)[0]; // Удаляем данные о дереве из массива и сохраняем его
                        var treeMarker = tree.marker; // Получаем маркер из объекта дерева
                        map.removeLayer(treeMarker); // Удаляем маркер дерева с карты
                        removedTrees.push(tree); // Добавляем удаленное дерево в массив
                    }
                }
                updateTreesList(removedTrees); // Обновляем список удаленных деревьев
            } else {
                alert("Пожалуйста, введите корректное число деревьев для удаления.");
            }
        }


        function updateTreesList(removedTrees) {
            var treesListDiv = document.getElementById('treesList');
            treesListDiv.innerHTML = '<h3>Удаленные деревья:</h3><ul>';
            removedTrees.forEach(function (tree) {
                treesListDiv.innerHTML += '<li>Координаты: ' + tree.marker.getLatLng().lat.toFixed(6) + ', ' + tree.marker.getLatLng().lng.toFixed(6) + '</li>';
            });
            treesListDiv.innerHTML += '</ul>';
        }

        // Инициализируем карту после загрузки страницы
        window.onload = init;
    </script>
}
